use phf::phf_map;

pub const LD_DATA: [(f64, f64, f64); 20] = [
    (90.0, 0.0, 0.166666666666667),
    (90.0, 180.0, 0.166666666666667),
    (90.0, 90.0, 0.166666666666667),
    (90.0, -90.0, 0.166666666666667),
    (0.0, 90.0, 0.166666666666667),
    (180.0, 90.0, 0.166666666666667),
    (90.0, 0.0, 0.066666666666667),
    (90.0, 180.0, 0.066666666666667),
    (90.0, 90.0, 0.066666666666667),
    (90.0, -90.0, 0.066666666666667),
    (0.0, 90.0, 0.066666666666667),
    (180.0, 90.0, 0.066666666666667),
    (54.735610317245346, 45.0, 0.075),
    (125.26438968275465, 45.0, 0.075),
    (54.735610317245346, -45.0, 0.075),
    (125.26438968275465, -45.0, 0.075),
    (54.735610317245346, 135.0, 0.075),
    (125.26438968275465, 135.0, 0.075),
    (54.735610317245346, -135.0, 0.075),
    (125.26438968275465, -135.0, 0.075),
];

static OFFSETS: phf::Map<&'static str, (usize, usize)> = phf_map! {
    "6" => (0, 6),
    "14" => (6, 20),
};

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn grid_selection() {
        let LD003 = &LD_DATA[OFFSETS["6"].0 .. OFFSETS["6"].1];
        let LD005 = &LD_DATA[OFFSETS["14"].0 .. OFFSETS["14"].1];
        println!("{:?}\n{}", LD003.to_vec(), LD003.to_vec().len());
        println!("{:?}\n{}", LD005.to_vec(), LD005.to_vec().len());
    }

}